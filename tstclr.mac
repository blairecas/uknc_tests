	.title	TSTCLR
	.enabl	LC
	
	.asect					; needed for my linker
	.=1000

START:	nop					; first command MUST BE NOP for booting from rs232
	mtps	#200				; stop interrupts
	mov	#1000, SP
	mov	#PPUSTA, R4			; run PPU code
	mov	#PPUEND-PPUSTA/2, R5
	call	PPRUN

	tstb	@#177560			; test K0 status reg (wait keypress)
	bpl	.-4
	tstb	@#177562			; read K0 data reg

	dec 	PPCOMM				; ask PPU to exit
	tst	PPCOMM				; wait for it
	bne	.-4

	call	PPREL				; release PPU memory 
	mov	#TTEXTR, R0			; print string
	emt	351
	clr	R0				; .hreset before exit (close files etc)
	emt	350				; .exit

; init screen to text mode and print something
TTEXTR:	.ascii	<33>"%!3"<14>"Test 128 colors utility. First half is Y=0 (50% brightness)."<0>

; command to PPU
PPCOMM:	.word	0

; PPU message
PPMSG:	.word	PPARR				; address of beginning of array
        .word	177777				; end of transmission

; PPU data exchange array
PPARR:	.byte	0				; return value (0 - OK)
PPCMD:	.byte	0				; command
	.word	32				; device type (32 - PPU mem)
PPAPP:	.word	0				; address for PPU
PPACP:	.word	0				; address for CPU
PPLEN:	.word	0				; length in words

; send command to PPU with exch array
PPSEN:	mov	#PPMSG, R0			; array address
	mov	#5, R1				; bytes to send+1 (sending from @#PP_MSG)
	br	1$
2$:	movb	(R0)+, @#176676
1$:	tstb	@#176674			; test if we are ready to send
	bpl	1$				; cycle if >= 0 (not set last bit in byte)
	sob	R1, 2$
	return

; send and start PPU code
; R4 - start addr in CPU
; R5 - length / 2
PPRUN:	movb	#1, PPCMD			; 1 - allocate memory
	mov	R5, PPLEN
	call	PPSEN				; (!) warn - no testing for success
	movb	#20, PPCMD			; 20 - write to PPU mem
	mov	R5, PPLEN
	mov 	R4, PPACP
	call	PPSEN
	movb	#30, PPCMD			; 30 - run
	call	PPSEN
	return

; release PPU memory
PPREL:	movb	#2, PPCMD			; 2 - release memory
	call	PPSEN
	return


; //////////////////////////////////////////////////////////////////////////////	
; // PPU code
; //////////////////////////////////////////////////////////////////////////////

PPUSTA:	mtps	#200				; no interrupts
	; call	@7132(R0)			; stop FD motor

	; damn that hacks - need to correct memory descriptors
	mov	PC, R0
	add	#PpuSta-., R0			; start of program
	mov	#PpuEnd-PpuSta, -(R0)		; write length of current PPU code block
	sub	#4, R0				; addr of our descriptor
	mov	PC, R1
	add	#PpuEnd-., R1			; end of program
	mov	#77772, R2
	sub	R1, R2				; length of free block (assume our program is last though it's incorrect)
	clr	(R1)+				; 'free'
	mov	R0, (R1)+			; addr of previous descriptor
	mov	R2, (R1)+			; length of free mem 

PPDRAW:	; setup screen memory
	mov	#100000, @#177010		; starting vaddr/2
	mov	#288., R3			; 288 lines
10$:	mov	#8., R4				; 8 color lines
	clr	R0				; color index
20$:	mov	#5., R5				; 5 characters in each line (40 pixels)
30$:	mov	R0, R1				; R0 - color index
	asl	R1				; R1 - color index*2
	; put RGB
	mov	PC, R2
	add	#COLR0-., R2
	add	R0, R2
	movb	(R2), @#177012
	mov	PC, R2
	add	#COLR1-., R2
	add	R1, R2
	mov	(R2), @#177014
	;
	inc	@#177010
	sob	R5, 30$
	inc	R0
	sob	R4, 20$
	sob	R3, 10$
	; draw bounding box
	mov	#177010, R4
	mov	#177012, R5
	mov	#177014, R3
	mov	#40., R2
	mov	#100000, (R4)
40$:	mov	#177777, (R3)
	movb	#377, (R5)
	inc	(R4)
	sob	R2, 40$
	mov	#40., R2
	mov	#287.*40.+100000, (R4)
50$:	mov	#177777, (R3)
	movb	#377, (R5)
	inc	(R4)
	sob	R2, 50$
	mov	#288., R2
	mov	#100000, (R4)
60$:	bis	#^B0000000100000001, (R3)
	bisb	#^B00000001, (R5)
	add	#39., (R4)
	bis	#^B0000000100000001, (R3)
	bisb	#^B00000001, (R5)
	inc	(R4)
	sob	R2, 60$

PPSTLI:	; setup video lines
	mov	@#270, Bkp270			; backup old vlines table addr
	mov	@#272, Bkp272
	mov	PC, R0				; get new vlines table addr
	add	#VLTBL-.+16., R0
	bic	#^B1111, R0			; align with 16. bytes
	mov	R0, -(SP)			; save it
	add	#6, (SP)			; +6 means first line is lumi&color

	mov	#^B0011001000010000, (R0)+ 	; YRGB YRGB YRGB YRGB for colors 1st part
	mov	#^B0111011001010100, (R0)+	; YRGB YRGB YRGB YRGB for colors 2nd part
	clr	(R0)+				; vaddr not used for first 18 lines
	mov	R0, (R0)
	add	#4, (R0)+			; +2 means next line is scale&cursor
	mov	#^B0000000000010000, (R0)+	; no cursor
	mov	#^B0000000000010000, (R0)+	; 320x288, min rgb luminance (last 3 bits)
	clr	(R0)+				; vaddr still not needed
	mov	R0, (R0)
	add	#2, (R0)+			; +0 means next line is 2-word descriptor
	; here are 16. empty lines for video controller
	mov	#16., R3
10$:	clr	(R0)+				; still no vaddr
	mov	R0, (R0)			;
	add	#2, (R0)+			; next element addr
	sob	R3, 10$
	; next lines are res/cursor/rgb lumi
	dec	R0
	dec	R0
	bis	#2, (R0)+
	; now lines addr must be aligned by 8 bytes 
	
	; now are main part - 288 lines
	mov	#100000, R1			; vaddr (/2)	
	call	SET144

	; next 1 line to set Y to 1
	dec	R0				; correct last line to point to colors line
	dec	R0				;
	bis	#6, (R0)+			; correct to colors
	mov	#^B1011101010011000, (R0)+	; YRGB YRGB YRGB YRGB for colors 1st part
	mov	#^B1111111011011100, (R0)+	; YRGB YRGB YRGB YRGB for colors 2nd part
	mov	R1, (R0)+			; vaddr
	add	#40., R1			; advance vaddr
	mov	R0, (R0)
	add	#4, (R0)+			; +2 next line is scale&cursor
	
	; repeat 144 lines (I KNOW WE HAVE AN EXTRA ONE)
	call	SET144

	; all lines are set - switch video to them
	clr	@#270
	mov	(SP)+, @#272
	mtps	#0
		
PPCYCL:	mov	#PPCOMM/2, @#177010
	mov	@#177014, R0
	bmi	10$
	trap	0				; execute other processes in PPU dispatcher
	br	PPCYCL
10$:	mov	Bkp270, @#270			; restore vlines table
	mov	Bkp272, @#272
	mov	#PPCOMM/2, @#177010		; ackn exit
	clr	@#177014
	return


; 144 lines are 8. blocks by 18. lines
SET144:	clr	R5				; it's RGB luminance
	mov	#8., R2				; 8. blocks
50$:	mov	#18., R3			; 18. lines each
60$:	mov	#^B0000000000010000, (R0)+ 	; no cursor
	mov	#^B0000000000010000, (R0)  	; 320x288
	bis	R5, (R0)+			; add RGB luminance
	mov	R1, (R0)+			; vaddr
	add	#40., R1			; advance vaddr by 40. chars
	mov	R0, (R0)
	add	#2, (R0)
	bis	#2, (R0)+			; can we just add #4, (R0)+ ?
	sob	R3, 60$
	inc	R5				; increase rgb lumi
	sob	R2, 50$
	return

; //////////////////////////////////////////////////////////////////////////////

BKP270:	.word	0
BKP272:	.word	0

COLR0:	.byte	0, 377, 0, 377, 0, 377, 0, 377
COLR1:	.word	^B0000000000000000, ^B0000000000000000
	.word	^B0000000011111111, ^B0000000011111111
	.word	^B1111111100000000, ^B1111111100000000
	.word	^B1111111111111111, ^B1111111111111111

; //////////////////////////////////////////////////////////////////////////////
; // END PPU CODE 
; //////////////////////////////////////////////////////////////////////////////
VLTBL	= . 
PPUEND	= 307.*8. + VLTBL + 16.			; 307 'lines' by 4 words descriptors +16 bytes for align

	.END	START
